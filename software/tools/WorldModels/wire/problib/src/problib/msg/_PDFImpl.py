# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from problib/PDFImpl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import problib.msg

class PDFImpl(genpy.Message):
  _md5sum = "fb6528e73eebd5785d5111d28934c039"
  _type = "problib/PDFImpl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 GAUSSIAN=1
uint8 UNIFORM=2
uint8 DISJUNCTION_STRING = 3  # PMF
uint8 DISJUNCTION_FLOAT = 4   # PMF
uint8 DISJUNCTION_PDF = 5     # Mixture
uint8 CONJUNCTION = 6

uint8 type
uint32 num_dimensions
DimensionDescription[] dimensions

# Gaussian
float64[] mean
float64[] covariance

# Uniform
float64 density

# For both mixture and discrete 
float64[] probabilities

# mixture of PFDs (conjunction or disjunction)
uint32[] sub_pdf_ptrs

# discrete
int32 domain_size
float64[] values_float
string[] values_string


================================================================================
MSG: problib/DimensionDescription
# example: object1.pos_x = ["object1", "pos_x"]
string[] fields
"""
  # Pseudo-constants
  GAUSSIAN = 1
  UNIFORM = 2
  DISJUNCTION_STRING = 3
  DISJUNCTION_FLOAT = 4
  DISJUNCTION_PDF = 5
  CONJUNCTION = 6

  __slots__ = ['type','num_dimensions','dimensions','mean','covariance','density','probabilities','sub_pdf_ptrs','domain_size','values_float','values_string']
  _slot_types = ['uint8','uint32','problib/DimensionDescription[]','float64[]','float64[]','float64','float64[]','uint32[]','int32','float64[]','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,num_dimensions,dimensions,mean,covariance,density,probabilities,sub_pdf_ptrs,domain_size,values_float,values_string

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PDFImpl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.num_dimensions is None:
        self.num_dimensions = 0
      if self.dimensions is None:
        self.dimensions = []
      if self.mean is None:
        self.mean = []
      if self.covariance is None:
        self.covariance = []
      if self.density is None:
        self.density = 0.
      if self.probabilities is None:
        self.probabilities = []
      if self.sub_pdf_ptrs is None:
        self.sub_pdf_ptrs = []
      if self.domain_size is None:
        self.domain_size = 0
      if self.values_float is None:
        self.values_float = []
      if self.values_string is None:
        self.values_string = []
    else:
      self.type = 0
      self.num_dimensions = 0
      self.dimensions = []
      self.mean = []
      self.covariance = []
      self.density = 0.
      self.probabilities = []
      self.sub_pdf_ptrs = []
      self.domain_size = 0
      self.values_float = []
      self.values_string = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BI().pack(_x.type, _x.num_dimensions))
      length = len(self.dimensions)
      buff.write(_struct_I.pack(length))
      for val1 in self.dimensions:
        length = len(val1.fields)
        buff.write(_struct_I.pack(length))
        for val2 in val1.fields:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      length = len(self.mean)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.mean))
      length = len(self.covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.covariance))
      buff.write(_get_struct_d().pack(self.density))
      length = len(self.probabilities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.probabilities))
      length = len(self.sub_pdf_ptrs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.sub_pdf_ptrs))
      buff.write(_get_struct_i().pack(self.domain_size))
      length = len(self.values_float)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.values_float))
      length = len(self.values_string)
      buff.write(_struct_I.pack(length))
      for val1 in self.values_string:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.dimensions is None:
        self.dimensions = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.type, _x.num_dimensions,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dimensions = []
      for i in range(0, length):
        val1 = problib.msg.DimensionDescription()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.fields = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.fields.append(val2)
        self.dimensions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.mean = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.covariance = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.density,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.probabilities = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.sub_pdf_ptrs = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.domain_size,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.values_float = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.values_string = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.values_string.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BI().pack(_x.type, _x.num_dimensions))
      length = len(self.dimensions)
      buff.write(_struct_I.pack(length))
      for val1 in self.dimensions:
        length = len(val1.fields)
        buff.write(_struct_I.pack(length))
        for val2 in val1.fields:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      length = len(self.mean)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.mean.tostring())
      length = len(self.covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.covariance.tostring())
      buff.write(_get_struct_d().pack(self.density))
      length = len(self.probabilities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.probabilities.tostring())
      length = len(self.sub_pdf_ptrs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.sub_pdf_ptrs.tostring())
      buff.write(_get_struct_i().pack(self.domain_size))
      length = len(self.values_float)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.values_float.tostring())
      length = len(self.values_string)
      buff.write(_struct_I.pack(length))
      for val1 in self.values_string:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.dimensions is None:
        self.dimensions = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.type, _x.num_dimensions,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dimensions = []
      for i in range(0, length):
        val1 = problib.msg.DimensionDescription()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.fields = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.fields.append(val2)
        self.dimensions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.mean = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 8
      (self.density,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.probabilities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.sub_pdf_ptrs = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (self.domain_size,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.values_float = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.values_string = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.values_string.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
