# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from problib/PDF.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PDF(genpy.Message):
  _md5sum = "75a0d678d0983733e909d6d13b746309"
  _type = "problib/PDF"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 EXACT=0     # Is here for easier msg creation, but is actually a specialized case:
                  # - continuous: is a Gaussian with zero covariance
                  # - discrete: is a Discrete pdf with one entry with P=1                
uint8 GAUSSIAN=1
uint8 UNIFORM=2
uint8 PARTICLES=3
uint8 MIXTURE=4
uint8 DISCRETE=5
uint8 HYBRID=6

uint8 type
uint32 dimensions

# For continuous pdf's
float64[] data

# For discrete pdf's (pmf)
int32 domain_size
string[] values
float64[] probabilities

# For exact values, either a string or a vector
string exact_value_str
float64[] exact_value_vec
"""
  # Pseudo-constants
  EXACT = 0
  GAUSSIAN = 1
  UNIFORM = 2
  PARTICLES = 3
  MIXTURE = 4
  DISCRETE = 5
  HYBRID = 6

  __slots__ = ['type','dimensions','data','domain_size','values','probabilities','exact_value_str','exact_value_vec']
  _slot_types = ['uint8','uint32','float64[]','int32','string[]','float64[]','string','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,dimensions,data,domain_size,values,probabilities,exact_value_str,exact_value_vec

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PDF, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.dimensions is None:
        self.dimensions = 0
      if self.data is None:
        self.data = []
      if self.domain_size is None:
        self.domain_size = 0
      if self.values is None:
        self.values = []
      if self.probabilities is None:
        self.probabilities = []
      if self.exact_value_str is None:
        self.exact_value_str = ''
      if self.exact_value_vec is None:
        self.exact_value_vec = []
    else:
      self.type = 0
      self.dimensions = 0
      self.data = []
      self.domain_size = 0
      self.values = []
      self.probabilities = []
      self.exact_value_str = ''
      self.exact_value_vec = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BI().pack(_x.type, _x.dimensions))
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.data))
      buff.write(_get_struct_i().pack(self.domain_size))
      length = len(self.values)
      buff.write(_struct_I.pack(length))
      for val1 in self.values:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.probabilities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.probabilities))
      _x = self.exact_value_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.exact_value_vec)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.exact_value_vec))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.type, _x.dimensions,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.domain_size,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.values = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.probabilities = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exact_value_str = str[start:end].decode('utf-8')
      else:
        self.exact_value_str = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.exact_value_vec = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BI().pack(_x.type, _x.dimensions))
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.data.tostring())
      buff.write(_get_struct_i().pack(self.domain_size))
      length = len(self.values)
      buff.write(_struct_I.pack(length))
      for val1 in self.values:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.probabilities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.probabilities.tostring())
      _x = self.exact_value_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.exact_value_vec)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.exact_value_vec.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.type, _x.dimensions,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (self.domain_size,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.values = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.probabilities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.exact_value_str = str[start:end].decode('utf-8')
      else:
        self.exact_value_str = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.exact_value_vec = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
